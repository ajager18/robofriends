{"version":3,"sources":["SearchBar.js","Card.js","CardList.js","ScrollBar.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","searchCh","type","placeholder","onChange","Card","name","email","id","className","src","alt","CardList","robots","map","user","key","ScrollBar","props","style","overflowY","height","border","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","filterRobots","this","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAUeA,EARG,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACnB,OACE,6BACA,2BAAOC,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCQ/CI,G,MAVF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACzB,OACE,yBAAKC,UAAU,kCACf,yBAAKC,IAAG,+BAA0BF,EAA1B,gBAA4CG,IAAI,KACxD,4BAAKL,GACL,2BAAIC,MCKQK,EARE,SAAC,GAKjB,OAL8B,EAAZC,OACKC,KAAI,SAAAC,GACzB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAKP,GAAIA,GAAIO,EAAKP,GAAIF,KAAMS,EAAKT,KAAMC,MAAOQ,EAAKR,YCGzDU,EARG,SAACC,GAClB,OACC,yBAAKC,MAAQ,CAACC,UAAW,SAAUC,OAAO,SAAUC,OAAO,oBAC1DJ,EAAMK,WCiCMC,G,wDA/Bb,aAAc,IAAD,8BACX,gBAOFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAPxC,EAAKC,MAAM,CACTlB,OAAQ,GACRe,YAAa,IAJJ,E,gEAYQ,IAAD,OAClBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAlB,GAAI,OAAE,EAAKY,SAAS,CAACd,OAAOE,S,+BAG7G,IAAD,OACDqB,EAAeC,KAAKN,MAAMlB,OAAOyB,QAAO,SAAAC,GAAK,OAAEA,EAAMjC,KAAKkC,cAAcC,SAAS,EAAKV,MAAMH,gBAClG,OACI,yBAAKnB,UAAU,mBAEf,2CACA,kBAAC,EAAD,CAAWR,SAAYoC,KAAKZ,iBAC5B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUZ,OAAQuB,U,GAzBRM,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.da573830.chunk.js","sourcesContent":["import React from 'react'\n\nconst SearchBar = ({searchCh}) => {\n\treturn (\n\t\t\t<div>\n\t\t\t<input\ttype='search' placeholder='Search robots' onChange={searchCh}/>\n\t\t\t</div>\n\t\t);\n}\n\nexport default SearchBar;","import React from 'react';\nimport 'tachyons';\n\nconst Card = ({name,email,id}) => {\n\treturn (\n\t\t\t<div className='bg-light-blue ma2 pa3 grow dib'>\n\t\t\t<img src={`https://robohash.org/${id}.png?200x200`} alt=\"\"/>\n\t\t\t<h3>{name}</h3>\n\t\t\t<p>{email}</p>\t\n\t\t\t</div>\n\t\t);\n};\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\n\nconst CardList = ({robots}) => {\n\tconst robotall =robots.map(user=>{\n\t\t\treturn <Card key={user.id} id={user.id} name={user.name} email={user.email}/>\n\t\t}\n\t\t)\n\treturn robotall;\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst ScrollBar = (props) => {\n\treturn (\n\t\t<div style= {{overflowY: 'scroll', height:'1000px', border:'2px solid black'}}>\n\t\t{props.children}\n\t\t</div>\n\t\t);\n}\n\nexport default ScrollBar;","import React, {Component} from 'react';\nimport SearchBar from './SearchBar';\nimport CardList from './CardList';\nimport ScrollBar from './ScrollBar';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state={\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchfield:event.target.value});\n  }\n\n  componentDidMount (){\n    fetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()).then(user=>this.setState({robots:user}));\n  };\n\n  render (){\n    const filterRobots = this.state.robots.filter(robot=>robot.name.toLowerCase().includes(this.state.searchfield));\n    return (\n        <div className='tc bg-dark-blue'>\n        \n        <h1>Robofriends</h1>\n        <SearchBar searchCh = {this.onSearchChange} />\n        <ScrollBar>\n        <CardList robots={filterRobots} />\n         </ScrollBar>\n        </div>\n      );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}